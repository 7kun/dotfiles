#clearsnippets
priority 1

# some util functions {{{ #
global !p
def generate_label(text):
	return text.lower().replace(' ', '_')

def create_row_placeholders(snip):
	# retrieving singlee line from current string and treat it like tabstops
	placeholders_amount = int(snip.buffer[snip.line].strip())

	# erase current line
	snip.buffer[snip.line] = ''

	# create anonymous snippet with expected content and number of tabstops
	anon_snippet_body = ' & '.join(['$' + str(i+1) for i in range(placeholders_amount)])
	# expand anonymous snippet
	snip.expand_anon(anon_snippet_body)
endglobal
# }}} some util functions #

# documentclass {{{ # article
snippet art "\documentclass[10pt]{article}" b
% {{{ Header
\documentclass[10pt,letterpaper]{article}
\usepackage{amsthm}
\usepackage{amsmath}
\usepackage{amsfonts}
\usepackage{enumerate}
\usepackage[${1:margin=1.2in}]{geometry}
\title{${2:title}}
\author{${3:Yufan Lu}}
\setlength\parindent{0pt}
% {{{ theorem
\newtheorem{theorem}{Theorem}[section]
\theoremstyle{definition}
\newtheorem{definition}[theorem]{Definition}
\newtheorem{corollary}[theorem]{Corollary}
\newtheorem{lemma}[theorem]{Lemma}
\newtheorem{claim}[theorem]{Claim}
\newtheorem{example}[theorem]{Example}
\newtheorem{property}[theorem]{Property}
\theoremstyle{remark}
\newtheorem{remark}[theorem]{Remark}
% }}}
% }}}
\begin{document}
\maketitle
$4
\end{document}
endsnippet
# }}}

# pairs {{{

snippet $$ "$$" iA
\$${1:${VISUAL:content}}\$
endsnippet

snippet || "||" iA
|${1:${VISUAL:content}}|
endsnippet

snippet () "()" iA
(${1:${VISUAL:content}})
endsnippet

snippet {} "{}" iA
{${1:${VISUAL:content}}}
endsnippet

snippet \( "\( \)" iw
\(${1:${VISUAL:content}}\)
endsnippet

snippet (( "\left(...\right)" iw
\left(${1:${VISUAL:content}}\right)
endsnippet

snippet \[ "\[ \]" iw
\[ ${1:${VISUAL:content}} \]
endsnippet

snippet [[ "\left[...\right]" iw
\left[${1:${VISUAL:content}}\right]
endsnippet

snippet \{ "\{ \}" i
\\{${1:${VISUAL:content}}\\}
endsnippet

snippet \< "||" iw
\langle ${1:${VISUAL:content}} \rangle
endsnippet

# }}} pair #

# arrow {{{ #
snippet -> "\to" iA
\to
endsnippet

snippet => "\to" iA
\Rightarrow
endsnippet
# }}} arrow #

# text modifier {{{

snippet tt "\text{}" i
\text{${1:${VISUAL}}}
endsnippet

snippet ti "\textit{}" i
\textit{${1:${VISUAL}}}
endsnippet

snippet emp "\emph{}" i
\emph{${1:${VISUAL}}}
endsnippet

snippet bf "\textbf{}" i
\textbf{${1:${VISUAL}}}
endsnippet

snippet mf "\mathbf{}" i
\mathbf{${1:${VISUAL}}}
endsnippet

snippet mc "\mathcal{}" i
\mathcal{${1:${VISUAL}}}
endsnippet

snippet mb "\mathbb{}" i
\mathbb{${1:${VISUAL}}}
endsnippet

snippet ... "\dots" iA
\dots
endsnippet

snippet iff "iff" iw
\textit{iff}
endsnippet
# }}}

# math {{{

snippet dp "\displaystyle" iw
\displaystyle
endsnippet

snippet int "\int" iw
\int^{$1}_{$2}
endsnippet

snippet b\ "\bigg|" iw
\bigg|^{$1}_{$2}
endsnippet

snippet vv "\vv{}" iw
\vv{$1}
endsnippet

snippet ot "\tilde{}" iw
\tilde{$1}
endsnippet

snippet \= "\not=" iA
\not=
endsnippet

snippet hat "\hat{}" i
\hat{${1:${VISUAL:content}}}
endsnippet

snippet '. "\cdot" iA
\cdot
endsnippet

snippet bin "\binom{n}{k}" i
\binom{$1}{$2}
endsnippet

snippet ubr "\underbrace" i
\underbrace{${1:${VISUAL}}}_{$2}
endsnippet

snippet os "\overset{}{}" i
\overset{${1:above}}{${2:below}}
endsnippet

snippet us "\underset" i
\underset{${1:under}}{${2:above}}
endsnippet

snippet <= "\le" iA
\le
endsnippet

snippet >= "\ge" iA
\ge
endsnippet

snippet __ "__" iA
_{${1:${VISUAL}}}
endsnippet

snippet ^^ "^^" iA
^{${1:${VISUAL}}}
endsnippet

snippet == "&=" wA
&=
endsnippet

snippet +- "\pm" iA
\pm
endsnippet

snippet `{ "\subset" iw
\subset
endsnippet

snippet `{= "\subseteq" iw
\subseteq
endsnippet

snippet `/ "\frac" iA
\frac{$1}{$2}
endsnippet

snippet ~~ "\tilde{}" iA
\tilde{$1}
endsnippet
# }}}

snippet "" "quote" iA
\`\`${1:${VISUAL}}''
endsnippet

snippet `^ "\hat{}" iA
\hat{$1}
endsnippet

# math envir {{{ #
snippet thm "theorem" b
\begin{theorem}[${1:name}]
	\label{def:${2:`!p snip.rv = generate_label(t[1])`}}
    ${3:${VISUAL}}
\end{theorem}
endsnippet

snippet cor "corollary" b
\begin{corollary}
    ${2:${VISUAL}}
\end{corollary}
endsnippet

snippet lem "lemma" b
\begin{lemma}
    ${2:${VISUAL}}
\end{lemma}
endsnippet

snippet proof "\begin{proof}" b
\begin{proof}
    ${1:${VISUAL}}
\end{proof}
endsnippet

snippet cla "\begin{claim}" b
\begin{claim}
    ${1:${VISUAL}}
\end{claim}
endsnippet

snippet pro "\begin{property}" b
\begin{property}
    ${1:${VISUAL}}
\end{property}
endsnippet

snippet def "\begin{definition}" b
\begin{definition}[$1]
	\label{def:${2:`!p snip.rv = generate_label(t[1])`}}
    ${3:${VISUAL}}
\end{definition}
endsnippet

snippet exa "\begin{example}" b
\begin{example}
    ${1:${VISUAL}}
	\begin{solution}
		$2
	\end{solution}
\end{example}
endsnippet
# }}}

snippet \\m "\\[mm]" i
\\\\[${1:2mm}]
endsnippet

snippet enumr "enumerate with resume" b
\begin{enumerate}[resume]
	\item $1
\end{enumerate}
endsnippet

snippet cas "\begin{case}" i
\begin{cases}
	${1:value}, &\textit{ if } ${2:cond} \\\\
	${3:value}, &\textit{ otherwirse }
\end{cases}
endsnippet


post_jump "create_row_placeholders(snip)"
snippet "tr(\d+)" "latex table row variable" br
`!p snip.rv = match.group(1)`
endsnippet

snippet mcol "\multicols{}" b
\begin{multicols}{${1:2}}
	${2:${VISUAL:content}}
	\columnbreak
\end{multicols}
endsnippet

snippet sec "\section" b
\section{${1:section}}
\label{sec:${2:`!p snip.rv = generate_label(t[1])`}}
% {{{
${3:${VISUAL}}
% }}}
endsnippet

snippet sub "\subsection" b
\subsection{${1:subsection}}
\label{sub:${2:`!p snip.rv = generate_label(t[1])`}}
${3:${VISUAL}}
endsnippet

snippet ssub "\subsubsection" b
\subsubsection{${1:subsubsection}}
\label{ssub:${2:`!p snip.rv = generate_label(t[1])`}}
${3:${VISUAL}}
endsnippet

snippet note "note envir" b
\begin{note}
	$1
\end{note}
endsnippet

# vim:foldmethod=syntax:foldlevel=0
